mixin responseSummary(survey, responses)
    .row.my-2
        label.col-form-label.col-md-2(for="questionResults") Question
        .col
            select.form-select.select2#question-results-select(data-placeholder="Question")
                for question in survey.questions
                    if question.type !== 'header'
                        option(value=question.id)=question.question
        .col-md-2.text-end
            button.btn.btn-outline-primary.mx-1#prev-question-response(role="button" title='Previous' data-bs-toggle='tooltip' disabled='true')
                i.fas.fa-arrow-left.me-1
            span.ms-1#current-question 1
            span.mx-1 of
            span.me-1=survey.questions.filter(r => {return r.type !== 'header'}).length

            button.btn.btn-outline-primary.mx-1#next-question-response(role="button" title='Next' data-bs-toggle='tooltip')
                i.fas.fa-arrow-right.ms-1
    #question-responses-container
        for question in survey.questions
            if question.type !== 'header'
                +questionSummaryDisplay(question, responses)



mixin questionSummaryDisplay(question, responses)
    .row.question-response.my-3(id=`question-response-${question.id}` style='display:none' data-questionid=question.id)
        .col
            h5=question.question
            case question.type
                when 'shorttext'
                    +questionSummaryText(question, responses)
                when 'text'
                    +questionSummaryText(question, responses)
                when 'boolean'
                    +questionSummaryBoolean(question, responses)
                when 'scale'
                    +questionSummaryScale(question, responses)
                when 'dropdown'
                    +questionSummaryScale(question, responses)
                when 'events'
                    +questionResultEvents(question, responses)

mixin questionSummaryText(question, responses)
    ul.list-group
        for response of responses
            - const question_response = _.findWhere(response.responses, {question_id: question.id})
            if question_response && question_response.value && question_response.value !== ''
                li.list-group-item
                    if (!response.anonymous)
                        i=response.user.name
                    p= question_response.value

mixin questionSummaryBoolean(question, responses)
    -
        let totalResponses = 0;
        let positiveResponses = 0;
        for(const response of responses){
            const question_response = _.findWhere(response.responses, {question_id: question.id})
            if (question_response){
                totalResponses++;
                if (question_response.value) {
                    positiveResponses++;
                }
            }
        }
    if totalResponses
        p #{Math.round(positiveResponses / totalResponses) * 100}%  of #{totalResponses} Responses.

mixin questionSummaryScale(question, responses)
    -
        const answers = [];
        let totalResponses = 0;
        if (question.config && question.config.options){
            for (let idx=0; idx < question.config.options.length; idx++){
                answers[idx] = {
                    count: 0,
                    text: question.config.options[idx]
                }
            }
        } else {
            answers[0] = {count:0, text: 'No Response'}
            answers[1] = {count:0, text: 'Strong Negative (1)'}
            answers[2] = {count:0, text: 'Negative (2)'}
            answers[3] = {count:0, text: 'Neutral (3)'}
            answers[4] = {count:0, text: 'Positive (4)'}
            answers[5] = {count:0, text: 'Strong Positive (5)'}
        }
        for(const response of responses){
            const question_response = _.findWhere(response.responses, {question_id: question.id})
            if (question_response && Number(question_response.value) !== -1){
                totalResponses++;
                answers[Number(question_response.value)].count++;
            }
        }

    ul.list-group
        for answer of answers
            li.list-group-item
                .row
                    .col #{answer.text}:
                    .col=answer.count
        li.list-group-item
                .row
                    .col
                        strong Total Responses:
                    .col
                        strong=totalResponses

mixin questionResultEvents(question, responses)
    -
        let eventFeedback = {}
        for(const response of responses){
            for (const feedback of response.feedback){
                if (feedback.skipped) { continue; }
                if (!_.has(eventFeedback, feedback.event_id)){
                    eventFeedback[feedback.event_id] = {
                        id: feedback.event_id,
                        event: events[feedback.event_id],
                        feedback: []
                    };
                }
                eventFeedback[feedback.event_id].feedback.push(feedback)
            }
        }

        eventFeedback = _.values(eventFeedback).sort((a, b)=>{
            const aCategory = a.event.event_category.name;
            const bCategory = b.event.event_category.name;
            if (aCategory !== bCategory){
                return aCategory.localeCompare(bCategory);
            }
            const regex = /[^\w\d]*/g;
            const aTitle = a.event.title.replace(regex, '');
            const bTitle = b.event.title.replace(regex, '');
            return aTitle.localeCompare(bTitle);
        });

    .accordion#feedback-accordion-summary
        each feedback in eventFeedback
            .accordion-item
                h2.accordion-header
                    button.accordion-button.collapsed.p-2(
                        type="button"
                        data-bs-toggle="collapse"
                        data-bs-target=`#feedback-summary-event${feedback.event.id}`
                        aria-expanded="false"
                        aria-controls=`feedback-summary-event${feedback.event.id}`
                    )
                        .col-2
                            small= feedback.event.event_category.name
                        .col=feedback.event.title
                        .col
                            -
                                const team_members = [];
                                for (const team_member of feedback.event.team_members){
                                    if (team_member.display_team_member){
                                        team_members.push(team_member.user_con_profile.name_without_nickname)
                                    }
                                }

                            small #{feedback.event.event_category.team_member_name}(s): #{team_members.join(', ')}
                        .col-2.text-end.p-2
                            .badge.text-bg-primary #{feedback.feedback.length}

                .accordion-collapse.collapse(
                    id=`feedback-summary-event${feedback.event.id}`
                    data-bs-parent='#feedback-accordion-summary'
                )
                    .accordion-body
                        +eventSummary(feedback.feedback, feedback.event)

mixin eventSummary(feedback, event)
    - const recommend = _.countBy(feedback, 'recommend');

    h5 Do you recommend this game?

    .progress.my-2.ms-4(role="progressbar" style="height: 25px")
        - const nrWidth = Math.round(recommend['-1'] / feedback.length * 100)
        .progress-bar.bg-light(style=`width: ${nrWidth}%`)
            if nrWidth
                | No Response: #{recommend['-1']} #{nrWidth}%

        - const snWidth = Math.round(recommend['1']/feedback.length * 100)
        .progress-bar.bg-danger(style=`width: ${snWidth}%`)
            if snWidth
                | Strong No: #{recommend['1']} #{snWidth}%

        - const nWidth = Math.round(recommend['2']/feedback.length * 100)
        .progress-bar.bg-warning(style=`width: ${nWidth}%`)
            if nWidth
                | No: #{recommend['2']} #{nWidth}%

        - const nuWidth = Math.round(recommend['3']/feedback.length * 100)
        .progress-bar.bg-primary(style=`width: ${nuWidth}%`)
            if nuWidth
                | Neutral: #{recommend['3']} #{nuWidth}%


        - const pWidth = Math.round(recommend['4']/feedback.length * 100)
        .progress-bar.bg-info(style=`width: ${pWidth}%`)
            if pWidth
                | Yes: #{recommend['4']} #{pWidth}%

        - const spWidth = Math.round(recommend['5']/feedback.length * 100)
        .progress-bar.bg-success(style=`width: ${spWidth}%`)
            if spWidth
                | Strong Yes: #{recommend['5']} #{spWidth}%

    h5 Feedback for Intercon Staff
    ul.list-group.my-2.ms-4
        for entry of feedback
            if entry.concom && entry.concom !== ''
                li.list-group-item.text-bg-light= entry.concom


    h5 Feedback for #{event.event_category.team_member_name}(s)
    ul.list-group.my-2.ms-4
        for entry of feedback
            if entry.gm && entry.gm !== ''
                li.list-group-item.text-bg-light= entry.gm

mixin responseIndividual(survey, responses)
    .row.my-3
        label.col-form-label.col-md-2(for="questionResults") Response
        .col-md-8
            select.form-select.select2#question-individual-select(data-placeholder="Response")
                for response in responses
                    option(value=response.id)
                        if response.anonymous
                            | Anonymous (##{response.id})

                        else
                            | #{response.user.name} (#{response.user.email})
                        if !response.complete
                            span(partial)
        .col-md-2.text-end
            button.btn.btn-outline-primary.mx-1#prev-individual-response(role="button" title='Previous' data-bs-toggle='tooltip' disabled='true')
                i.fas.fa-arrow-left.me-1
            span.ms-1#current-response 1
            span.mx-1 of
            span.me-1=responses.length

            button.btn.btn-outline-primary.mx-1#next-individual-response(role="button" title='Next' data-bs-toggle='tooltip')
                i.fas.fa-arrow-right.ms-1
    #individual-responses-container
        each response in responses
            +responseDisplay(response, survey)

mixin responseDisplay(response, survey,)
    .row.individual-response.my-2(id=`individual-response-${response.id}` style='display: none' data-responseid=response.id)
        .col
            .float-end
                h5 #{moment(response.updated).format('lll')}
            h3
                if response.anonymous
                    | Anonymous (##{response.id})
                else
                    | #{response.user.name} (#{response.user.email})
                if !response.complete
                    .badge.text-bg-warning.mx-2 Partial
            for question in survey.questions
                .row.my-2
                    .col
                        +responseQuestionDisplay(question, response)

mixin responseQuestionDisplay(question, response)
    - const question_response = _.findWhere(response.responses, {question_id: question.id})

    case question.type
        when 'shorttext'
            +questionIndividualText(question, question_response)
        when 'text'
            +questionIndividualText(question, question_response)
        when 'boolean'
            +questionIndividualBoolean(question, question_response)
        when 'scale'
            +questionIndividualScale(question, question_response)
        when 'dropdown'
            +questionIndividualScale(question, question_response)
        when 'events'
            +questionIndividualEvents(question, response)

mixin questionIndividualText(question, response)
    h5=question.question
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})
    .card.text-bg-light.ms-4
        .card-body.p-2
            if response
                = response.value
            else
                i No Answer Provided

mixin questionIndividualBoolean(question, response)
    h5=question.question
        if response && response.value
            .badge.text-bg-success.ms-2 Yes
        else
            .badge.text-bg-danger.ms-2 No

mixin questionIndividualScale(question, response)
    h5=question.question
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})

    .card.text-bg-light.ms-4
        .card-body.p-2
            if question.config && question.config.options
                if response && response.value !== -1
                    = question.config.options[response.value]
                else
                    i No Answer Provided
            else
                if response && response.value !== -1
                    case response.value
                        when 1
                            | Strong Negative (1)
                        when 2
                            | Negative (2)
                        when 3
                            | Neutral (3)
                        when 4
                            | Positive (4)
                        when 5
                            | Strong Positive (5)
                else
                    i No Answer Provided

mixin questionIndividualEvents(question, response)
    label.control-label.mb-2(for=`response-${response.response_id}-question-${question.id}`)=question.question
    .accordion.ms-4(id=`feedback-accordion-${response.id}`)

        each feedback in response.feedback
            if !feedback.skipped
                - const event = events[feedback.event_id]
                .accordion-item
                    h2.accordion-header
                        button.accordion-button.collapsed.p-2(
                            type="button"
                            data-bs-toggle="collapse"
                            data-bs-target=`#feedback-${response.id}-event${feedback.event_id}`
                            aria-expanded="false"
                            aria-controls=`feedback-${response.id}-event${feedback.event_id}`
                        )
                            .col-2
                                small= event.event_category.name
                            .col=event.title
                            .col
                                -
                                    const team_members = [];
                                    for (const team_member of event.team_members){
                                        if (team_member.display_team_member){
                                            team_members.push(team_member.user_con_profile.name_without_nickname)
                                        }
                                    }

                                small #{event.event_category.team_member_name}(s): #{team_members.join(', ')}
                    .accordion-collapse.collapse(
                        id=`feedback-${response.id}-event${feedback.event_id}`
                        data-bs-parent=`#feedback-accordion-${response.id}`
                    )
                        .accordion-body
                            h5 Do you recommend this #{event.event_category.name}?
                                case feedback.recommend
                                    when -1
                                        .badge.text-bg-dark.ms-2 No Response
                                    when 1
                                        .badge.text-bg-danger.ms-2 Strong No
                                    when 2
                                        .badge.text-bg-warning.ms-2 No
                                    when 3
                                        .badge.text-bg-primary.ms-2 Neutral
                                    when 4
                                        .badge.text-bg-info.ms-2 Yes
                                    when 5
                                        .badge.text-bg-success.ms-2 Strong Yes

                            h5 Feedback for Intercon Staff
                            .card.text-bg-light.ms-4.mb-2
                                .card-body.p-2=feedback.concom?feedback.concom:'None Provided'


                            h5 Feedback for #{event.event_category.team_member_name}(s)
                            .card.text-bg-light.ms-4.mb-2
                                .card-body.p-2=feedback.gm?feedback.gm:'None Provided'

                            h5 Share my name with the #{event.event_category.team_member_name}(s)
                                if feedback.gm_use_name
                                    .badge.text-bg-success.ms-2 Yes
                                else
                                    .badge.text-bg-danger.ms-2 No



