mixin questionDisplay(question)
    case question.type
        when 'shorttext'
            +questionShorttext(question)
        when 'text'
            +questionText(question)
        when 'boolean'
            +questionBoolean(question)
        when 'scale'
            +questionScale(question)
        when 'dropdown'
            +questionDropdown(question)
        when 'events'
            +questionEventsStub(question)


mixin questionShorttext(question)
    label.control-label(for="question-" + question.id)=question.question
    input.form-control(
        type="text"
        name=`response[responses][q-${question.id}]`
        value=getValue(question.id)
        id='question-' + question.id,
        required=question.required
        disabled=response.complete
        )
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})

    div.invalid-feedback Please choose a valid value for this item
    

mixin questionText(question)
    label.control-label(for="question-" + question.id)=question.question
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})
    textarea.form-control(
        name=`response[responses][q-${question.id}]`
        id='question-' + question.id
        required=question.required
        disabled=response.complete
        rows=question.config && question.config.rows?question.config.rows:5
    )
        = getValue(question.id)

mixin questionBoolean(question)
    <!-- Default checked -->
    .form-check.form-switch
        input.form-check-input(
            type="checkbox"
            name=`response[responses][q-${question.id}]`
            checked=getValue(question.id)
            id='question-' + question.id
            disabled=response.complete
            )
        label.form-check-label(for="question-" + question.id)=question.question
        if question.description
            .form-text!=marked.parse(question.description,  {breaks: true})

mixin questionDropdown(question)
    label.control-label(for="question-" + question.id)=question.question
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})
    select.form-select.select2.question(
        data-placeholder=question.config.placeholder
        name=`response[responses][q-${question.id}]`
        id='question-' + question.id
        disabled=response.complete
        required=question.required
        )
        option
        each option, idx in question.config.options
            option(value=idx selected=Number(getValue(question.id))===idx )= option

mixin questionScale(question)
    label.control-label(for="question-" + question.id)=question.question
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})

    div(id=`question-${question.id}`)
        if (!questionrequired)
            .form-check.form-check-inline.mx-3.px-2.border-end
                input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=-1 id=`question-${question.id}-nr` checked=getValue(question.id)===null || Number(getValue(question.id)) === -1 disabled=response.complete)
                label.form-check-label(for=`question-${question.id}-nr`) No Response
        if question.config && question.config.options
            each option, idx in question.config.options
                .form-check.form-check-inline.mx-2
                    input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=idx id=`question-${question.id}-${idx}` checked=Number(getValue(question.id))===idx  disabled=response.complete)
                    label.form-check-label(for=`question-${question.id}-${idx}`)= option

        else
            .form-check.form-check-inline.mx-2
                input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=1 id=`question-${question.id}-1` checked=Number(getValue(question.id))===1  disabled=response.complete)
                label.form-check-label(for=`question-${question.id}-1`) Strong Negative (1)
            .form-check.form-check-inline.mx-2
                input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=2 id=`question-${question.id}-2` checked=Number(getValue(question.id))===2  disabled=response.complete)
                label.form-check-label(for=`question-${question.id}-2`) Negative (2)
            .form-check.form-check-inline.mx-2
                input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=3 id=`question-${question.id}-3` checked=Number(getValue(question.id))===3  disabled=response.complete)
                label.form-check-label(for=`question-${question.id}-3`) Neutral (3)
            .form-check.form-check-inline.mx-2
                input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=4 id=`question-${question.id}-4` checked=Number(getValue(question.id))===4  disabled=response.complete)
                label.form-check-label(for=`question-${question.id}-4`) Positive (4)
            .form-check.form-check-inline.mx-2
                input.form-check-input(type="radio" name=`response[responses][q-${question.id}]` value=5 id=`question-${question.id}-5` checked=Number(getValue(question.id))===5 disabled=response.complete)
                label.form-check-label(for=`question-${question.id}-5`) Strongly Positive (5)

mixin questionEventsStub(question)
    label.control-label(for="questionEvents")=question.question
    if question.description
        .form-text!=marked.parse(question.description,  {breaks: true})
    #questionEvents(style='display:none')
    .col-sm-6.offset-sm-3.text-center#signupsLoading
        .spinner-border.m-5(role="status" style="width: 3rem; height: 3rem;")
            .visually-hidden Table is Loading


mixin questionEvents()
    .row.mb-1
        .col.px-2
            .table-responsive
                table.table.table-sm.table-striped
                    thead
                        tr
                            th Category
                            th Event Name
                            th.text-end Actions
                    tbody
                        for userEvent in userEvents
                            -
                                const event = userEvent.event
                                if (!event) { continue }
                                const feedback = userEvent.feedback

                                let hasFeedback = false;
                                if (feedback){
                                    if (feedback.recommend && feedback.recommend !== -1){
                                        hasFeedback = true;
                                    } else if (feedback.gm && feedback.gm !== ''){
                                        hasFeedback = true;
                                    } else if (feedback.concom && feedback.concom !== ''){
                                        hasFeedback = true;
                                    }

                                }
                            tr
                                td
                                    small= event.event_category.name
                                td= event.title
                                    if hasFeedback
                                        .badge.text-bg-success.ms-2.d-md-inline
                                            i.fas.fa-check-circle.me-1
                                            | Feedback Provided
                                td.text-end
                                    .btn-group
                                        button.btn.btn-sm.btn-outline-primary.feedback-edit.d-inline-block(
                                            role='button'
                                            data-eventid=event.id
                                            disabled=disabled
                                            title=hasFeedback?'Edit Feedback':'Provide Feedback'
                                            data-bs-toggle='tooltip'
                                        )
                                            i.fas.fa-edit.feedback-icon
                                            if hasFeedback
                                                .d-none.d-lg-inline.ms-1 Edit Feedback
                                            else
                                                .d-none.d-lg-inline.ms-1 Provide Feedback
                                        button.btn.btn-sm.btn-outline-danger.ms-1.feedback-remove.d-inline-block(
                                            role='button'
                                            data-eventid= event.id
                                            data-bs-toggle='tooltip'
                                            title="Remove from List"
                                            disabled=disabled
                                        )
                                            i.fas.fa-trash.fa-fw.feedback-icon

    .row.mb-2
        .col.px-2
            .input-group.eventPicker
                select.form-select.select2.event-select(data-placeholder='Select an event to add')
                    option
                    for event in events
                        option(value=event.id)= event.event_category.name + ': '+ event.title

                button.btn.btn-outline-success.feedback-add( type="button")
                    span.fa.fa-plus
                    |  Add Event

mixin surveyModal()
    .modal.modal-fullscreen-lg-down.fade#surveyModal(role="dialog" tabindex="-1" aria-labelledby="popupModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false")
        .modal-dialog.modal-xl.modal-dialog-centered(role="document")
            .modal-content
                .modal-header
                    h5.modal-title
                    button.btn-close#dismissPopupModal(type="button", data-bs-dismiss="modal" area-label="Close")
                .modal-body
                .modal-footer
                    button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Cancel
                    span.extra-buttons
                    button.btn.btn-primary.save-btn(type="submit") Save
